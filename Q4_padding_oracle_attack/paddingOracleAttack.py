#!/usr/bin/env python3
"""This modul is contructed base on the padding oracle attack defined in Vaudenayâ€™s paper (https://www.iacr.org/archive/eurocrypt2002/23320530/cbc02_e02d.pdf)"""
"""
Plaintext is:
The Magic Words are Squeamish Ossifrage
"""
from urllib import parse as urlParse, error as urlError, request as urlRequest
import os

def xor(a, b):
    """Xor 2 bytes """
    if len(a) > len(b):
        return bytes([x ^ y for (x, y) in zip(a[:len(b)], b)])
    else:
        return bytes([x ^ y for (x, y) in zip(a, b[:len(a)])])

#headding of the URL
TARGET = 'http://crypto-class.appspot.com/po?er='

def verifyGuess(ciphertext:bytes)->bool:
    #create queryURL
    content=ciphertext.hex()
    query=TARGET+content;
    #send HTTP request to server
    req=urlRequest.Request(query)
    print(".",end="",flush=True)
    verifyGuess.nRequest+=1
    try:
        urlRequest.urlopen(req)
        return True
    except urlError.HTTPError as e:
        if e.code==404:
            #good padding
            return True
        else:
            #bad padding
            return False
verifyGuess.nRequest=0

def lastByteOracle(cipher:bytes)->(int,bytearray):
    """Get the last bytes of the decrypted block of a ciphertext block .
    It is different from the plaintext we need to find out (not the plaintext of AES with CBC mode).
    Param:
        cipher: ciphertext block need to be decrypted
    Return: (nBytes,lastBytes)
        nBytes: number of bytes successfully decrypted
        lastBytes: bytearray with length nBytes, successfully decrypted"""
    #get 16 random bytes
    rand=bytearray(os.urandom(16))
    temp=rand[:]
    for i in range(256):
        temp[-1]=rand[-1]^i
        if verifyGuess(temp+cipher):
            break
    rand[-1]=temp[-1]
    #Check whether the padding ends with 1,2-2,3-3-3,..
    for n in range(16,1,-1):
        temp[16-n]^=1
        if not verifyGuess(temp+cipher):
            return n,bytearray([b^n for b in rand[-n:]])
        temp[16-n]^=1
    return 1,bytearray([rand[-1]^1])


def blockDecryptionOracle(cipher:bytes)->bytearray:
    """Decrypt a ciphertext block using padding Oracle.
    Param: 
        cipher:ciphertext block need to be decypted
    Return:
        Bytearray that is the decypted from the cipher"""

    #get the last bytes of decrypted block
    nKnown,knownDecryptedBlock=lastByteOracle(cipher)
    #iterate until get all 16 bytes decypted of ciphertext
    while nKnown<16:
        #construct a fake ciphertext to send to server
        r=bytearray(os.urandom(16-nKnown))+bytearray([b^(nKnown+1) for b in knownDecryptedBlock])
        for i in range(256):
            r[15-nKnown]^=i
            if verifyGuess(r+cipher):
                break
            r[15-nKnown]^=i
        nextByte=r[15-nKnown]^(nKnown+1)
        knownDecryptedBlock=bytearray([nextByte])+knownDecryptedBlock
        nKnown+=1
    return knownDecryptedBlock
        
    

def paddingOracleAttack(cipher:bytes)->str:
    """Getting the plaintext block using padding oracle attack"""
    plaintext=None
    if len(cipher)%16!=0:
        print("The length of ciphertext is invalid")
        return None
    #divide msg into blocks of 16 bytes
    #the first block is IV
    blocks=[cipher[16*i:16*i+16] for i in range(0,len(cipher)//16)]
    plaintext=""
    for i in range(1,len(blocks)):
        print("Decrypting the %dth block..."%i)
        ret=xor(blockDecryptionOracle(blocks[i]),blocks[i-1]).decode("ascii")
        print("\n%dth block is:"%i,ret)
        plaintext+=ret
    return plaintext

if __name__ == "__main__":
    ciphertext=bytes.fromhex('f20bdba6ff29eed7b046d1df9fb7000058b1ffb4210a580f748b4ac714c001bd4a61044426fb515dad3f21f18aa577c0bdf302936266926ff37dbf7035d5eeb4')
    plaintext=paddingOracleAttack(ciphertext)
    print("Total request sent to server:",verifyGuess.nRequest)
    print("Plaintext is:",plaintext,sep="\n")






"""
################################################################################################################################################################
Result:
dangnh@X:~$ ./paddingOracleAttack.py
Decrypting the 1th block...

1th block is: The Magic Words 
Decrypting the 2th block...

2th block is: are Squeamish Os
Decrypting the 3th block...

3th block is: sifrage                                   
Total request sent to server: 5333
Plaintext is:
The Magic Words are Squeamish Ossifrage                                 
"""

